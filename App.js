import React, { useState, useEffect, useCallback } from 'react';
import { StatusBar } from 'expo-status-bar';
import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  RefreshControl,
  Dimensions,
  Platform
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import { Ionicons } from '@expo/vector-icons';

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
import { WeatherService } from './services/WeatherService';
import { RainbowCalculator } from './services/RainbowCalculator';
import { SunCalculator } from './services/SunCalculator';
import { RainbowCompass } from './components/RainbowCompass';

const { width, height } = Dimensions.get('window');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export default function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [location, setLocation] = useState(null);
  const [weather, setWeather] = useState(null);
  const [rainbowData, setRainbowData] = useState(null);
  const [sunData, setSunData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [locationName, setLocationName] = useState('');
  const [permissionsGranted, setPermissionsGranted] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    initializeApp();
  }, []);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  useEffect(() => {
    const interval = setInterval(() => {
      if (location && permissionsGranted) {
        updateRainbowData(false);
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, [location, permissionsGranted]);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  const initializeApp = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      const permissions = await requestPermissions();
      setPermissionsGranted(permissions);
      
      if (permissions) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        const currentLocation = await getCurrentLocation();
        if (currentLocation) {
          setLocation(currentLocation);
          
          // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
          const name = await WeatherService.getLocationName(
            currentLocation.coords.latitude,
            currentLocation.coords.longitude
          );
          setLocationName(name ? `${name.city}, ${name.country}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ');
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–¥—É–≥–µ
          await updateRainbowData(false);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    } finally {
      setLoading(false);
    }
  };

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
   */
  const requestPermissions = async () => {
    try {
      // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const { status: locationStatus } = await Location.requestForegroundPermissionsAsync();
      if (locationStatus !== 'granted') {
        Alert.alert(
          '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
          '–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é'
        );
        return false;
      }

      // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ñ–æ–Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
      
      // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { status: notificationStatus } = await Notifications.requestPermissionsAsync();
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
   */
  const getCurrentLocation = async () => {
    try {
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
        timeout: 10000,
      });
      
      return location;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
      return null;
    }
  };

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–¥—É–≥–µ
   */
  const updateRainbowData = async (showLoading = true) => {
    if (!location) return;

    try {
      if (showLoading) setLoading(true);
      
      const { latitude, longitude } = location.coords;
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const currentWeather = await WeatherService.getCurrentWeather(latitude, longitude);
      setWeather(currentWeather);
      
      // –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
      const currentTime = new Date();
      const sunPosition = SunCalculator.calculateSunPosition(latitude, longitude, currentTime);
      const solarEvents = SunCalculator.calculateSolarEvents(latitude, longitude, currentTime);
      setSunData({ position: sunPosition, events: solarEvents });
      
      // –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–¥—É–≥–∏
      const rainbowConditions = {
        latitude,
        longitude,
        weather: currentWeather,
        dateTime: currentTime
      };
      
      const rainbowResult = RainbowCalculator.calculateRainbowProbability(rainbowConditions);
      setRainbowData(rainbowResult);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      setLastUpdate(new Date());
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await checkNotificationConditions(rainbowResult);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–¥—É–≥–µ');
    } finally {
      if (showLoading) setLoading(false);
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const checkNotificationConditions = async (rainbowResult) => {
    if (rainbowResult.probability > 70) {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üåà –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–¥—É–≥–∏!',
          body: `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ${rainbowResult.probability}%. –°–º–æ—Ç—Ä–∏—Ç–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${Math.round(rainbowResult.direction.center)}¬∞`,
          data: { rainbowData: rainbowResult },
        },
        trigger: { seconds: 1 },
      });
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await updateRainbowData(false);
    setRefreshing(false);
  }, [location]);

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
   */
  const formatTime = (date) => {
    if (!date) return '--:--';
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
   */
  const getProbabilityColor = (probability) => {
    if (probability >= 70) return '#10b981'; // –ó–µ–ª–µ–Ω—ã–π
    if (probability >= 50) return '#f59e0b'; // –ñ–µ–ª—Ç—ã–π
    if (probability >= 30) return '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π
    return '#6b7280'; // –°–µ—Ä—ã–π
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
   */
  const getQualityDescription = (quality) => {
    const descriptions = {
      none: '–†–∞–¥—É–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞',
      very_weak: '–û—á–µ–Ω—å —Å–ª–∞–±–∞—è —Ä–∞–¥—É–≥–∞',
      weak: '–°–ª–∞–±–∞—è —Ä–∞–¥—É–≥–∞',
      moderate: '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–¥—É–≥–∞',
      good: '–•–æ—Ä–æ—à–∞—è —Ä–∞–¥—É–≥–∞',
      excellent: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–¥—É–≥–∞!'
    };
    return descriptions[quality] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  if (loading) {
    return (
      <LinearGradient colors={['#667eea', '#764ba2']} style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="white" />
          <Text style={styles.loadingText}>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RainbowFinder...</Text>
          <Text style={styles.loadingSubtext}>
            –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </Text>
        </View>
        <StatusBar style="light" />
      </LinearGradient>
    );
  }

  if (!permissionsGranted) {
    return (
      <LinearGradient colors={['#667eea', '#764ba2']} style={styles.container}>
        <View style={styles.errorContainer}>
          <Ionicons name="location-outline" size={80} color="white" />
          <Text style={styles.errorTitle}>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</Text>
          <Text style={styles.errorText}>
            –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
          </Text>
          <TouchableOpacity style={styles.retryButton} onPress={initializeApp}>
            <Text style={styles.retryButtonText}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</Text>
          </TouchableOpacity>
        </View>
        <StatusBar style="light" />
      </LinearGradient>
    );
  }

  return (
    <LinearGradient colors={['#667eea', '#764ba2']} style={styles.container}>
      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            tintColor="white"
            colors={['white']}
          />
        }
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Text style={styles.title}>üåà RainbowFinder</Text>
          <Text style={styles.location}>{locationName}</Text>
          {lastUpdate && (
            <Text style={styles.lastUpdate}>
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatTime(lastUpdate)}
            </Text>
          )}
        </View>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ */}
        {rainbowData && (
          <View style={styles.mainCard}>
            <View style={styles.probabilityContainer}>
              <Text style={styles.probabilityLabel}>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–¥—É–≥–∏</Text>
              <Text 
                style={[
                  styles.probabilityValue,
                  { color: getProbabilityColor(rainbowData.probability) }
                ]}
              >
                {rainbowData.probability.toFixed(1)}%
              </Text>
              <Text style={styles.qualityText}>
                {getQualityDescription(rainbowData.quality)}
              </Text>
            </View>
            
            {rainbowData.probability > 30 && (
              <View style={styles.directionContainer}>
                <Ionicons name="compass-outline" size={24} color="#374151" />
                <Text style={styles.directionText}>
                  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {Math.round(rainbowData.direction.center)}¬∞
                </Text>
              </View>
            )}
          </View>
        )}

        {/* –¢–æ—á–Ω—ã–π –∫–æ–º–ø–∞—Å —Å–æ —Å—Ç—Ä–µ–ª–æ—á–∫–æ–π */}
        {rainbowData && sunData && (
          <RainbowCompass
            rainbowDirection={rainbowData.direction}
            probability={rainbowData.probability}
            sunPosition={sunData.position}
            userLocation={location}
          />
        )}

        {/* –£—Å–ª–æ–≤–∏—è */}
        {rainbowData && (
          <View style={styles.conditionsCard}>
            <Text style={styles.cardTitle}>üî¨ –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑</Text>
            
            <View style={styles.conditionRow}>
              <Text style={styles.conditionLabel}>‚òÄÔ∏è –£–≥–æ–ª —Å–æ–ª–Ω—Ü–∞:</Text>
              <Text style={styles.conditionValue}>
                {sunData?.position.altitude.toFixed(1)}¬∞ 
                {sunData?.position.altitude > 0 && sunData?.position.altitude < 42 ? ' ‚úÖ' : ' ‚ùå'}
              </Text>
            </View>
            
            <View style={styles.conditionRow}>
              <Text style={styles.conditionLabel}>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</Text>
              <Text style={styles.conditionValue}>
                {weather?.humidity}%
                {weather?.humidity > 70 ? ' ‚úÖ' : ' ‚ùå'}
              </Text>
            </View>
            
            <View style={styles.conditionRow}>
              <Text style={styles.conditionLabel}>‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:</Text>
              <Text style={styles.conditionValue}>
                {weather?.clouds.all}%
                {weather?.clouds.all > 20 && weather?.clouds.all < 80 ? ' ‚úÖ' : ' ‚ùå'}
              </Text>
            </View>
            
            <View style={styles.conditionRow}>
              <Text style={styles.conditionLabel}>üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å:</Text>
              <Text style={styles.conditionValue}>
                {weather?.visibility ? (weather.visibility / 1000).toFixed(1) : '--'}–∫–º
                {weather?.visibility > 5000 ? ' ‚úÖ' : ' ‚ùå'}
              </Text>
            </View>
            
            <View style={styles.conditionRow}>
              <Text style={styles.conditionLabel}>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</Text>
              <Text style={styles.conditionValue}>
                {weather?.temperature.toFixed(1)}¬∞C
              </Text>
            </View>
          </View>
        )}

        {/* –°–æ–ª–Ω–µ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è */}
        {sunData && (
          <View style={styles.solarCard}>
            <Text style={styles.cardTitle}>üåÖ –°–æ–ª–Ω–µ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</Text>
            
            <View style={styles.solarEventsContainer}>
              <View style={styles.solarEvent}>
                <Text style={styles.solarEventLabel}>–í–æ—Å—Ö–æ–¥</Text>
                <Text style={styles.solarEventTime}>
                  {formatTime(sunData.events.sunrise)}
                </Text>
              </View>
              
              <View style={styles.solarEvent}>
                <Text style={styles.solarEventLabel}>–ó–∞–∫–∞—Ç</Text>
                <Text style={styles.solarEventTime}>
                  {formatTime(sunData.events.sunset)}
                </Text>
              </View>
              
              <View style={styles.solarEvent}>
                <Text style={styles.solarEventLabel}>–°–æ–ª–Ω. –ø–æ–ª–¥–µ–Ω—å</Text>
                <Text style={styles.solarEventTime}>
                  {formatTime(sunData.events.solarNoon)}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {rainbowData?.recommendations && rainbowData.recommendations.length > 0 && (
          <View style={styles.recommendationsCard}>
            <Text style={styles.cardTitle}>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
            {rainbowData.recommendations.map((recommendation, index) => (
              <Text key={index} style={styles.recommendationText}>
                ‚Ä¢ {recommendation}
              </Text>
            ))}
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <TouchableOpacity 
          style={styles.refreshButton} 
          onPress={() => updateRainbowData(true)}
          disabled={loading}
        >
          <Ionicons name="refresh-outline" size={24} color="white" />
          <Text style={styles.refreshButtonText}>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</Text>
        </TouchableOpacity>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
        <View style={styles.infoCard}>
          <Text style={styles.infoTitle}>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</Text>
          <Text style={styles.infoText}>
            RainbowFinder –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ 
            –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞–¥—É–≥–∏. –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–∞—Ö –æ–ø—Ç–∏–∫–∏ 
            –∏ —É–≥–ª–µ –î–µ–∫–∞—Ä—Ç–∞ (42¬∞).
          </Text>
        </View>
      </ScrollView>
      
      <StatusBar style="light" />
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
    textAlign: 'center',
  },
  loadingSubtext: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 14,
    marginTop: 10,
    textAlign: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorTitle: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 20,
    textAlign: 'center',
  },
  errorText: {
    color: 'rgba(255,255,255,0.9)',
    fontSize: 16,
    marginTop: 15,
    textAlign: 'center',
    lineHeight: 24,
  },
  retryButton: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    marginTop: 30,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  location: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.9)',
    marginTop: 5,
  },
  lastUpdate: {
    fontSize: 12,
    color: 'rgba(255,255,255,0.7)',
    marginTop: 5,
  },
  mainCard: {
    backgroundColor: 'rgba(255,255,255,0.95)',
    borderRadius: 20,
    padding: 25,
    marginBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  probabilityContainer: {
    alignItems: 'center',
  },
  probabilityLabel: {
    fontSize: 16,
    color: '#6b7280',
    marginBottom: 10,
  },
  probabilityValue: {
    fontSize: 48,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  qualityText: {
    fontSize: 18,
    color: '#374151',
    fontWeight: '500',
  },
  directionContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 20,
    padding: 15,
    backgroundColor: 'rgba(59, 130, 246, 0.1)',
    borderRadius: 12,
  },
  directionText: {
    fontSize: 16,
    color: '#374151',
    marginLeft: 10,
    fontWeight: '500',
  },
  conditionsCard: {
    backgroundColor: 'rgba(255,255,255,0.95)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 15,
  },
  conditionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  conditionLabel: {
    fontSize: 16,
    color: '#6b7280',
    flex: 1,
  },
  conditionValue: {
    fontSize: 16,
    color: '#374151',
    fontWeight: '500',
  },
  solarCard: {
    backgroundColor: 'rgba(255,255,255,0.95)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  solarEventsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  solarEvent: {
    alignItems: 'center',
    flex: 1,
  },
  solarEventLabel: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 5,
  },
  solarEventTime: {
    fontSize: 16,
    color: '#374151',
    fontWeight: 'bold',
  },
  recommendationsCard: {
    backgroundColor: 'rgba(255,255,255,0.95)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  recommendationText: {
    fontSize: 15,
    color: '#374151',
    marginBottom: 8,
    lineHeight: 22,
  },
  refreshButton: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 25,
    marginBottom: 20,
  },
  refreshButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  infoCard: {
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 10,
  },
  infoText: {
    fontSize: 14,
    color: '#6b7280',
    lineHeight: 20,
  },
}); 
import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, Dimensions, Platform } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { Magnetometer } from 'expo-sensors';

const { width } = Dimensions.get('window');
const COMPASS_SIZE = Math.min(width * 0.7, 280);

export const RainbowCompass = ({ 
  rainbowDirection, 
  probability, 
  sunPosition, 
  userLocation 
}) => {
  
  const [magnetometerData, setMagnetometerData] = useState({ x: 0, y: 0, z: 0 });
  const [deviceHeading, setDeviceHeading] = useState(0); // –¢–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const [isCompassAvailable, setIsCompassAvailable] = useState(false);
  const [calibrationOffset, setCalibrationOffset] = useState(0); // üéØ –ö–ê–õ–ò–ë–†–û–í–ö–ê
  const subscription = useRef(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
  useEffect(() => {
    initializeCompass();
    return () => {
      unsubscribe();
    };
  }, []);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–∞—Å–∞
  const initializeCompass = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞
      const isAvailable = await Magnetometer.isAvailableAsync();
      
      if (isAvailable) {
        setIsCompassAvailable(true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Magnetometer.setUpdateInterval(100); // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞
        subscription.current = Magnetometer.addListener(handleMagnetometerUpdate);
        
        console.log('üß≠ –ö–æ–º–ø–∞—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.log('‚ö†Ô∏è –ú–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        setIsCompassAvailable(false);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–∞—Å–∞:', error);
      setIsCompassAvailable(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞
  const handleMagnetometerUpdate = (data) => {
    try {
      setMagnetometerData(data);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∞–∑–∏–º—É—Ç)
      const heading = calculateHeading(data);
      setDeviceHeading(heading);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞:', error);
      // –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
  };
  
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê –ö–û–ú–ü–ê–°–ê
  const calculateHeading = (data) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (!data || typeof data.x !== 'number' || typeof data.y !== 'number') {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞:', data);
        return 0;
      }
      
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      let heading = Math.atan2(data.y, data.x) * (180 / Math.PI);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª
      heading = heading >= 0 ? heading : heading + 360;
      
      // üîß –ö–ê–õ–ò–ë–†–û–í–ö–ê: –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –º–∞–≥–Ω–∏—Ç–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
      // –î–ª—è –†–æ—Å—Å–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ +7¬∞ (–≤–æ—Å—Ç–æ—á–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ)
      const magneticDeclination = 7;
      heading = (heading + magneticDeclination) % 360;
      
      return heading;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
      return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
    }
  };
  
  // üéØ –§–£–ù–ö–¶–ò–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ò –ö–û–ú–ü–ê–°–ê
  const calibrateCompass = () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ "—Å–µ–≤–µ—Ä"
    setCalibrationOffset(deviceHeading);
    console.log('üéØ –ö–æ–º–ø–∞—Å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω! –°–µ–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:', deviceHeading, '¬∞');
  };
  
  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤
  const unsubscribe = () => {
    if (subscription.current) {
      subscription.current.remove();
      subscription.current = null;
    }
  };
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞—Å –¥–∞–∂–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  if (!rainbowDirection && !sunPosition) {
    return (
      <View style={styles.compassContainer}>
        <View style={styles.inactiveCompass}>
          <Text style={styles.inactiveText}>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞—Å–∞...</Text>
          <Text style={styles.inactiveSubtext}>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω—Ü–µ</Text>
        </View>
      </View>
    );
  }
  
  // üêù –°–£–ü–ï–†-–¢–û–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–ß–ï–õ–ö–ê –°–¢–†–û–ì–û –ù–ê–ü–†–û–¢–ò–í –°–û–õ–ù–¶–ê!
  let targetDirection = 0;
  let isRainbowDirection = false;
  let beeRotation = 0;
  let sunRotationAngle = 0;
  let northRotation = 0;
  
  try {
    if (sunPosition && sunPosition.azimuth !== undefined) {
      // –§–ò–ó–ò–ß–ï–°–ö–ò–ô –ó–ê–ö–û–ù: –†–∞–¥—É–≥–∞ –≤—Å–µ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ—Ç–∏–≤–æ—Å–æ–ª–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
      // –ï—Å–ª–∏ —Å–æ–ª–Ω—Ü–µ –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ (90¬∞), —Ä–∞–¥—É–≥–∞ –Ω–∞ –∑–∞–ø–∞–¥–µ (270¬∞)
      // –ï—Å–ª–∏ —Å–æ–ª–Ω—Ü–µ –Ω–∞ —é–≥–µ (180¬∞), —Ä–∞–¥—É–≥–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ (0¬∞/360¬∞)
      
      const sunAzimuth = sunPosition.azimuth;
      targetDirection = (sunAzimuth + 180) % 360;
      
      isRainbowDirection = true;
      
      // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('üåû –°–æ–ª–Ω—Ü–µ –∞–∑–∏–º—É—Ç:', sunAzimuth);
      console.log('üêù –ü—á–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', targetDirection);
      console.log('üìê –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞ 180¬∞:', Math.abs(targetDirection - sunAzimuth));
    } else {
      // –†–µ–∑–µ—Ä–≤: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      targetDirection = rainbowDirection?.center || 0;
      isRainbowDirection = false;
    }
    
    // üéØ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–û–ú–ü–ê–°–ê –° –ö–ê–õ–ò–ë–†–û–í–ö–û–ô
    if (isCompassAvailable) {
      // –ö–æ–º–ø–∞—Å –∞–∫—Ç–∏–≤–µ–Ω: –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—Ç –ø–æ–≤–æ—Ä–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const calibratedHeading = (deviceHeading - calibrationOffset + 360) % 360;
      beeRotation = targetDirection - calibratedHeading;
      sunRotationAngle = (sunPosition?.azimuth || 0) - calibratedHeading;
      northRotation = -calibratedHeading; // –°–µ–≤–µ—Ä –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ç–∏–Ω–Ω—ã–π —Å–µ–≤–µ—Ä
    } else {
      // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      beeRotation = targetDirection;
      sunRotationAngle = sunPosition?.azimuth || 0;
      northRotation = 0;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–ª—ã
    beeRotation = ((beeRotation % 360) + 360) % 360;
    sunRotationAngle = ((sunRotationAngle % 360) + 360) % 360;
    northRotation = ((northRotation % 360) + 360) % 360;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–ø–∞—Å–∞:', error);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    targetDirection = 0;
    beeRotation = 0;
    sunRotationAngle = 0;
    northRotation = 0;
    isRainbowDirection = false;
  }
  
  // üîç –°–£–ü–ï–†-–î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê
  console.log('=== üêùüíû –ö–û–ú–ü–ê–° –î–õ–Ø –ö–ê–¢–ò ===');
  console.log('üåû –°–æ–ª–Ω—Ü–µ –∞–∑–∏–º—É—Ç:', sunPosition?.azimuth);
  console.log('üêù –ü—á–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', targetDirection);
  console.log('üìê –†–∞–∑–Ω–∏—Ü–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~180¬∞):', Math.abs(targetDirection - (sunPosition?.azimuth || 0)));
  console.log('üß≠ –ú–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä (–ø–æ–≤–æ—Ä–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞):', deviceHeading);
  console.log('üîÑ CSS –ø–æ–≤–æ—Ä–æ—Ç –ø—á–µ–ª–∫–∏:', beeRotation, '¬∞');
  console.log('‚òÄÔ∏è CSS –ø–æ–≤–æ—Ä–æ—Ç —Å–æ–ª–Ω—Ü–∞:', sunRotationAngle, '¬∞');
  console.log('üéØ CSS —Ä–∞–∑–Ω–∏—Ü–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~180¬∞):', Math.abs(beeRotation - sunRotationAngle));
  
  // üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ï—Å–ª–∏ —Å–æ–ª–Ω—Ü–µ –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ (90¬∞), –ø—á–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∑–∞–ø–∞–¥–µ (270¬∞)
  if (sunPosition?.azimuth) {
    const expectedBee = (sunPosition.azimuth + 180) % 360;
    const actualBee = targetDirection;
    console.log('üß™ –¢–ï–°–¢: –°–æ–ª–Ω—Ü–µ', sunPosition.azimuth, '¬∞ ‚Üí –ü—á–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å', expectedBee, '¬∞, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏', actualBee, '¬∞');
    console.log('‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞:', expectedBee === actualBee ? '–î–ê' : '–ù–ï–¢');
  }
  console.log('==============================');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const getDirectionName = (degrees) => {
    const directions = [
      { name: '–°', range: [337.5, 22.5] },
      { name: '–°–í', range: [22.5, 67.5] },
      { name: '–í', range: [67.5, 112.5] },
      { name: '–Æ–í', range: [112.5, 157.5] },
      { name: '–Æ', range: [157.5, 202.5] },
      { name: '–Æ–ó', range: [202.5, 247.5] },
      { name: '–ó', range: [247.5, 292.5] },
      { name: '–°–ó', range: [292.5, 337.5] }
    ];

    for (let dir of directions) {
      if (dir.range[0] > dir.range[1]) {
        // –°–ª—É—á–∞–π –¥–ª—è —Å–µ–≤–µ—Ä–∞ (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 0¬∞)
        if (degrees >= dir.range[0] || degrees <= dir.range[1]) {
          return dir.name;
        }
      } else {
        if (degrees >= dir.range[0] && degrees <= dir.range[1]) {
          return dir.name;
        }
      }
    }
    return '–°';
  };

  const directionName = getDirectionName(targetDirection);

  // –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
  const getArrowColor = () => {
    if (probability >= 70) return '#10b981'; // –ó–µ–ª–µ–Ω—ã–π
    if (probability >= 50) return '#f59e0b'; // –ñ–µ–ª—Ç—ã–π
    if (probability >= 30) return '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π
    return '#6b7280'; // –°–µ—Ä—ã–π
  };

  const compassTitle = isRainbowDirection 
    ? 'üåà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–¥—É–≥—É' 
    : '‚òÄÔ∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–æ—Ç —Å–æ–ª–Ω—Ü–∞)';
  
  const compassStatusText = isCompassAvailable 
    ? 'üêù –ü—á–µ–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ª–Ω—Ü–∞!' 
    : 'üìç –ü—á–µ–ª–∫–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Å–æ–ª–Ω—Ü–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)';
  
      return (
      <View style={styles.compassContainer}>
        <Text style={styles.compassTitle}>{compassTitle}</Text>
        <Text style={styles.compassStatus}>{compassStatusText}</Text>
        
        {!isRainbowDirection && (
          <Text style={styles.compassSubtitle}>
            ‚ö†Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –æ—Ç —Å–æ–ª–Ω—Ü–∞
          </Text>
        )}
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–∞—Å */}
      <View style={[styles.compass, { width: COMPASS_SIZE, height: COMPASS_SIZE }]}>
        
        {/* –§–æ–Ω –∫–æ–º–ø–∞—Å–∞ */}
        <LinearGradient
          colors={['rgba(255,255,255,0.95)', 'rgba(240,240,240,0.95)']}
          style={styles.compassBackground}
        >
          
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ */}
          <View style={styles.centerDot} />
          
          {/* –°—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞ */}
          <Text style={[styles.cardinalDirection, styles.north]}>–°</Text>
          <Text style={[styles.cardinalDirection, styles.east]}>–í</Text>
          <Text style={[styles.cardinalDirection, styles.south]}>–Æ</Text>
          <Text style={[styles.cardinalDirection, styles.west]}>–ó</Text>
          
          {/* –î–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–∞—Å–∞ */}
          {Array.from({ length: 36 }, (_, i) => {
            const angle = i * 10;
            const isMainDirection = angle % 90 === 0;
            const isMediumDirection = angle % 30 === 0;
            
            return (
              <View
                key={i}
                style={[
                  styles.compassTick,
                  {
                    transform: [{ rotate: `${angle}deg` }],
                    height: isMainDirection ? 20 : isMediumDirection ? 15 : 10,
                    backgroundColor: isMainDirection ? '#374151' : '#9ca3af'
                  }
                ]}
              />
            );
          })}
          
          {/* –ë–æ–ª—å—à–∞—è –º–∏–ª–∞—è –ø—á–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–¥—É–≥—É */}
          <View
            style={[
              styles.mainBeeIndicator,
              {
                transform: [{ rotate: `${beeRotation}deg` }]
              }
            ]}
          >
            <View style={styles.beeContainer}>
              <Text style={styles.bigBeeEmoji}>üêù</Text>
              <View style={styles.beeGlow} />
            </View>
          </View>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–ª–Ω—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É) */}
          <View
            style={[
              styles.sunIndicator,
              {
                transform: [{ rotate: `${sunRotationAngle}deg` }]
              }
            ]}
          >
            <Ionicons name="sunny" size={16} color="#f59e0b" />
          </View>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ–≤–µ—Ä–∞ (–∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–π —Å–µ–≤–µ—Ä) */}
          {isCompassAvailable && (
            <View
              style={[
                styles.northIndicator,
                {
                  transform: [{ 
                    rotate: `${northRotation}deg` 
                  }]
                }
              ]}
            >
              <Text style={styles.northText}>N</Text>
            </View>
          )}
          
        </LinearGradient>
      </View>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ */}
              <View style={styles.directionInfo}>
          <View style={styles.directionRow}>
            <Text style={styles.directionLabel}>üêù –ü—á–µ–ª–∫–∞ (—Ä–∞–¥—É–≥–∞):</Text>
            <Text style={[styles.directionValue, { color: getArrowColor() }]}>
              {Math.round(targetDirection)}¬∞ ({directionName})
            </Text>
          </View>
          {sunPosition && (
            <>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ:</Text>
                <Text style={[styles.directionValue, { color: '#f59e0b' }]}>
                  {Math.round(sunPosition.azimuth)}¬∞
                </Text>
              </View>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>üîÑ –ü–æ–≤–æ—Ä–æ—Ç –ø—á–µ–ª–∫–∏:</Text>
                <Text style={[styles.directionValue, { color: '#9333ea' }]}>
                  {Math.round(beeRotation)}¬∞
                </Text>
              </View>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>üß≠ –ú–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä:</Text>
                <Text style={[styles.directionValue, { color: '#059669' }]}>
                  {Math.round(deviceHeading)}¬∞
                </Text>
              </View>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>üìê –†–∞–∑–Ω–∏—Ü–∞:</Text>
                <Text style={[styles.directionValue, { color: Math.abs(targetDirection - sunPosition.azimuth) > 170 ? '#10b981' : '#ef4444' }]}>
                  {Math.round(Math.abs(targetDirection - sunPosition.azimuth))}¬∞ {Math.abs(targetDirection - sunPosition.azimuth) > 170 ? '‚úÖ' : '‚ùå'}
                </Text>
              </View>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>üß™ –¢–µ—Å—Ç:</Text>
                <Text style={[styles.directionValue, { color: '#6366f1', fontSize: 12 }]}>
                  –°–æ–ª–Ω—Ü–µ {Math.round(sunPosition.azimuth)}¬∞ ‚Üí –ü—á–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {Math.round((sunPosition.azimuth + 180) % 360)}¬∞
                </Text>
              </View>
            </>
          )}
          
          {isCompassAvailable && (
            <>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>–í–∞—à –∞–∑–∏–º—É—Ç:</Text>
                <Text style={styles.directionValue}>
                  {Math.round(deviceHeading)}¬∞ ({getDirectionName(deviceHeading)})
                </Text>
              </View>
              <View style={styles.directionRow}>
                <Text style={styles.directionLabel}>üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</Text>
                <Text style={styles.directionValue}>
                  {calibrationOffset > 0 ? `${Math.round(calibrationOffset)}¬∞` : '–ù–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω'}
                </Text>
              </View>
              <TouchableOpacity 
                style={styles.calibrateButton} 
                onPress={calibrateCompass}
              >
                <Text style={styles.calibrateButtonText}>üéØ –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞—Å</Text>
              </TouchableOpacity>
            </>
          )}
          
          <View style={styles.directionRow}>
            <Text style={styles.directionLabel}>–¢–æ—á–Ω–æ—Å—Ç—å:</Text>
            <Text style={styles.directionValue}>
              ¬±{isCompassAvailable ? '2' : '5'}¬∞
            </Text>
          </View>
        
        {userLocation && (
          <View style={styles.coordinatesContainer}>
            <Text style={styles.coordinatesTitle}>üìç –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</Text>
            <Text style={styles.coordinates}>
              {userLocation.coords.latitude.toFixed(6)}¬∞–°, {userLocation.coords.longitude.toFixed(6)}¬∞–í
            </Text>
          </View>
        )}
      </View>
      
              {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <View style={styles.instructions}>
          <Text style={styles.instructionTitle}>üêù –ü—á–µ–ª–∫–∞ –∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ:</Text>
          {isCompassAvailable ? (
            <Text style={styles.instructionText}>
              –ü—á–µ–ª–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ù–ê–ü–†–û–¢–ò–í —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ª–Ω—Ü–∞!{'\n'}
              –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ–∫–∞ –ø—á–µ–ª–∫–∞ –Ω–µ —É–∫–∞–∂–µ—Ç –≤–≤–µ—Ä—Ö{'\n'}
              –ü–æ–¥–Ω–∏–º–∏—Ç–µ –≤–∑–≥–ª—è–¥ –Ω–∞ –Ω–µ–±–æ –ø–æ–¥ —É–≥–ª–æ–º ~42¬∞ - —Ç–∞–º —Ä–∞–¥—É–≥–∞! ‚ú®
            </Text>
          ) : (
            <Text style={styles.instructionText}>
              –ü—á–µ–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Å–æ–ª–Ω—Ü–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ){'\n'}
              1. –í—Å—Ç–∞–Ω—å—Ç–µ —Å–ø–∏–Ω–æ–π –∫ —Å–æ–ª–Ω—Ü—É{'\n'}
              2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—á–µ–ª–∫–∏{'\n'}
              3. –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ –ø–æ–¥ —É–≥–ª–æ–º ~42¬∞{'\n'}
              4. –†–∞–¥—É–≥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            </Text>
          )}
        </View>
        
        {/* –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ */}
        {isCompassAvailable && (
          <View style={styles.calibrationTip}>
            <Text style={styles.calibrationText}>
              üí° –°–æ–≤–µ—Ç: –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–æ–π–¥–∏—Ç–µ –æ—Ç –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ WiFi —Ä–æ—É—Ç–µ—Ä–æ–≤
            </Text>
          </View>
        )}
    </View>
  );
};

const styles = StyleSheet.create({
  compassContainer: {
    alignItems: 'center',
    padding: 20,
    backgroundColor: 'rgba(255,255,255,0.95)',
    borderRadius: 20,
    marginVertical: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
  },
  
  compassTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 5,
    textAlign: 'center',
  },
  
  compassStatus: {
    fontSize: 14,
    color: '#10b981',
    marginBottom: 10,
    textAlign: 'center',
    fontWeight: '600',
  },
  
  compassSubtitle: {
    fontSize: 14,
    color: '#f59e0b',
    marginBottom: 15,
    textAlign: 'center',
    fontWeight: '500',
  },
  
  compass: {
    position: 'relative',
    borderRadius: 200,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 6,
  },
  
  compassBackground: {
    width: '100%',
    height: '100%',
    borderRadius: 200,
    position: 'relative',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 3,
    borderColor: '#e5e7eb',
  },
  
  centerDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#374151',
    position: 'absolute',
    zIndex: 10,
  },
  
  cardinalDirection: {
    position: 'absolute',
    fontSize: 18,
    fontWeight: 'bold',
    color: '#374151',
  },
  
  north: { top: 10 },
  south: { bottom: 10 },
  east: { right: 10 },
  west: { left: 10 },
  
  compassTick: {
    position: 'absolute',
    width: 2,
    top: 0,
    left: '50%',
    marginLeft: -1,
    transformOrigin: '1px 140px',
  },
  
  mainBeeIndicator: {
    position: 'absolute',
    width: 50,
    height: 50,
    alignItems: 'center',
    justifyContent: 'center',
    top: 40, // –°–ï–í–ï–† –∫–æ–º–ø–∞—Å–∞ - –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è
    left: 115, // –¶–ï–ù–¢–† –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
    transformOrigin: '25px 100px', // –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ –¶–ï–ù–¢–†–ê –∫–æ–º–ø–∞—Å–∞ (140-40 = 100px)
  },
  
  beeContainer: {
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  
  bigBeeEmoji: {
    fontSize: 36,
    textAlign: 'center',
    textShadowColor: 'rgba(0,0,0,0.4)',
    textShadowOffset: { width: 2, height: 2 },
    textShadowRadius: 6,
    zIndex: 2,
  },
  
  beeGlow: {
    position: 'absolute',
    width: 55,
    height: 55,
    borderRadius: 27.5,
    backgroundColor: 'rgba(255, 215, 0, 0.20)',
    shadowColor: '#FFD700',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 1.0,
    shadowRadius: 12,
    elevation: 5,
    zIndex: 1,
  },
  
  sunIndicator: {
    position: 'absolute',
    width: 26,
    height: 26,
    borderRadius: 13,
    backgroundColor: 'rgba(245, 158, 11, 0.5)',
    alignItems: 'center',
    justifyContent: 'center',
    top: 227, // –Æ–ì –∫–æ–º–ø–∞—Å–∞ - —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –ø—á–µ–ª–∫–µ (240-13=227)
    left: 152, // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –ø—á–µ–ª–∫–µ (165-13=152)
    transformOrigin: '13px 13px', // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ –¶–ï–ù–¢–†–ê —Å–æ–ª–Ω—Ü–∞
    shadowColor: '#f59e0b',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.9,
    shadowRadius: 12,
    elevation: 5,
    borderWidth: 1,
    borderColor: 'rgba(245, 158, 11, 0.3)',
  },
  
  northIndicator: {
    position: 'absolute',
    top: 8, // –°–ï–í–ï–† –∫–æ–º–ø–∞—Å–∞ (—Ü–µ–Ω—Ç—Ä - —Ä–∞–¥–∏—É—Å - 12px = 140px - 140px + 8px)
    left: 128, // –¶–ï–ù–¢–† –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (—Ü–µ–Ω—Ç—Ä - 12px = 140px - 12px = 128px)
    backgroundColor: '#ef4444',
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    transformOrigin: '12px 132px', // –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ –¶–ï–ù–¢–†–ê –∫–æ–º–ø–∞—Å–∞ (140-8 = 132px)
    shadowColor: '#ef4444',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.5,
    shadowRadius: 6,
    elevation: 2,
  },
  
  northText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: 'white',
  },
  
  directionInfo: {
    marginTop: 20,
    width: '100%',
  },
  
  directionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  
  directionLabel: {
    fontSize: 16,
    color: '#6b7280',
    fontWeight: '500',
  },
  
  directionValue: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  
  coordinatesContainer: {
    marginTop: 15,
    padding: 15,
    backgroundColor: 'rgba(59, 130, 246, 0.05)',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(59, 130, 246, 0.2)',
  },
  
  coordinatesTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 5,
  },
  
  coordinates: {
    fontSize: 12,
    color: '#6b7280',
    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',
  },
  
  calibrationTip: {
    marginTop: 15,
    padding: 12,
    backgroundColor: 'rgba(245, 158, 11, 0.05)',
    borderRadius: 10,
    borderWidth: 1,
    borderColor: 'rgba(245, 158, 11, 0.2)',
  },
  
  calibrationText: {
    fontSize: 12,
    color: '#92400e',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  
  calibrateButton: {
    marginTop: 10,
    padding: 12,
    backgroundColor: '#3b82f6',
    borderRadius: 8,
    alignItems: 'center',
  },
  
  calibrateButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  
  instructions: {
    marginTop: 20,
    padding: 15,
    backgroundColor: 'rgba(16, 185, 129, 0.05)',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(16, 185, 129, 0.2)',
  },
  
  instructionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 10,
  },
  
  instructionText: {
    fontSize: 14,
    color: '#6b7280',
    lineHeight: 20,
  },
  
  inactiveCompass: {
    width: COMPASS_SIZE,
    height: COMPASS_SIZE,
    borderRadius: COMPASS_SIZE / 2,
    backgroundColor: 'rgba(156, 163, 175, 0.1)',
    borderWidth: 2,
    borderColor: 'rgba(156, 163, 175, 0.3)',
    borderStyle: 'dashed',
    alignItems: 'center',
    justifyContent: 'center',
  },
  
  inactiveText: {
    fontSize: 18,
    color: '#9ca3af',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  
  inactiveSubtext: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
    marginTop: 5,
  },
  

}); 
import React, { useState } from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';

export default function App() {
  const [loading, setLoading] = useState(false);
  const [weatherData, setWeatherData] = useState(null);

  const API_KEY = 'be314fc63d2ce6bc8c976a4e60be8955';

  const testRainbowConditions = async () => {
    setLoading(true);
    try {
      // –¢–µ—Å—Ç API –¥–ª—è –ú–æ—Å–∫–≤—ã
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=${API_KEY}&units=metric&lang=ru`
      );
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      setWeatherData(data);
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–¥—É–≥–∏
      const humidity = data.main.humidity;
      const clouds = data.clouds.all;
      const visibility = data.visibility;
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–¥—É–≥–∏
      let rainbowProbability = 0;
      
      // –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (–∫–∞–ø–ª–∏ –≤–æ–¥—ã)
      if (humidity > 70) rainbowProbability += 25;
      
      // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —è—Å–Ω–æ, –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–∞—Å–º—É—Ä–Ω–æ)
      if (clouds > 20 && clouds < 80) rainbowProbability += 25;
      
      // –•–æ—Ä–æ—à–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
      if (visibility > 5000) rainbowProbability += 25;
      
      // –í—Ä–µ–º—è —Å—É—Ç–æ–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ)
      const hour = new Date().getHours();
      if ((hour >= 6 && hour <= 8) || (hour >= 18 && hour <= 20)) {
        rainbowProbability += 25;
      }
      
      Alert.alert(
        'üåà –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–¥—É–≥–∏',
        `–ì–æ—Ä–æ–¥: ${data.name}\n` +
        `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${data.main.temp}¬∞C\n` +
        `–ü–æ–≥–æ–¥–∞: ${data.weather[0].description}\n` +
        `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%\n` +
        `–û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${clouds}%\n` +
        `–í–∏–¥–∏–º–æ—Å—Ç—å: ${visibility/1000}–∫–º\n\n` +
        `üåà –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –†–ê–î–£–ì–ò: ${rainbowProbability}%\n\n` +
        (rainbowProbability > 60 ? 
          '‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–¥—É–≥–∏!' : 
          rainbowProbability > 30 ?
          'üü° –£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è' :
          '‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è')
      );
    } catch (error) {
      Alert.alert('‚ùå –û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const showAppInfo = () => {
    Alert.alert(
      'üåà RainbowFinder',
      '–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–¥—É–≥–∏!\n\n' +
      'üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenWeatherMap API\n' +
      'üßÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n' +
      '‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞\n' +
      '‚Ä¢ –û–±–ª–∞—á–Ω–æ—Å—Ç–∏\n' +
      '‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç–∏\n' +
      '‚Ä¢ –í—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫\n\n' +
      'üíù –°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é!'
    );
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üåà RainbowFinder</Text>
      <Text style={styles.subtitle}>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–¥—É–≥–∏</Text>
      
      <View style={styles.card}>
        <Text style={styles.cardTitle}>–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–∞–¥—É–≥–∏</Text>
        
        <TouchableOpacity 
          style={[styles.button, loading && styles.buttonDisabled]} 
          onPress={testRainbowConditions}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator color="white" />
          ) : (
            <Text style={styles.buttonText}>üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è</Text>
          )}
        </TouchableOpacity>
        
        {weatherData && (
          <View style={styles.weatherInfo}>
            <Text style={styles.weatherText}>
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {weatherData.name}:
            </Text>
            <Text style={styles.weatherDetails}>
              üå°Ô∏è {weatherData.main.temp}¬∞C
            </Text>
            <Text style={styles.weatherDetails}>
              üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weatherData.main.humidity}%
            </Text>
            <Text style={styles.weatherDetails}>
              ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weatherData.clouds.all}%
            </Text>
          </View>
        )}
      </View>
      
      <View style={styles.infoCard}>
        <Text style={styles.infoTitle}>‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Text>
        <Text style={styles.infoText}>
          ‚úÖ Expo Snack —Ä–∞–±–æ—Ç–∞–µ—Ç{'\n'}
          ‚úÖ React Native —Ä–∞–±–æ—Ç–∞–µ—Ç{'\n'}
          ‚úÖ API –∫–ª—é—á OpenWeatherMap: –Ω–∞—Å—Ç—Ä–æ–µ–Ω{'\n'}
          ‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ
        </Text>
      </View>
      
      <TouchableOpacity style={styles.infoButton} onPress={showAppInfo}>
        <Text style={styles.infoButtonText}>‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</Text>
      </TouchableOpacity>
      
      <Text style={styles.footer}>
        üíù –°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–¥—É–≥–∏! üåà
      </Text>
      
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f9ff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#0369a1',
    marginBottom: 5,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    marginBottom: 30,
    textAlign: 'center',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 25,
    marginBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 8,
    width: '100%',
    maxWidth: 350,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 20,
    textAlign: 'center',
  },
  button: {
    backgroundColor: '#3b82f6',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    marginBottom: 20,
    minWidth: 200,
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#9ca3af',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  weatherInfo: {
    backgroundColor: '#f8fafc',
    padding: 15,
    borderRadius: 10,
    width: '100%',
  },
  weatherText: {
    fontSize: 14,
    color: '#374151',
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  weatherDetails: {
    fontSize: 14,
    color: '#059669',
    textAlign: 'center',
    marginBottom: 5,
  },
  infoCard: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 4,
    width: '100%',
    maxWidth: 350,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#059669',
    marginBottom: 10,
  },
  infoText: {
    fontSize: 14,
    color: '#374151',
    textAlign: 'center',
    lineHeight: 20,
  },
  infoButton: {
    backgroundColor: '#6366f1',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 15,
    marginBottom: 20,
  },
  infoButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  footer: {
    fontSize: 14,
    color: '#7c3aed',
    textAlign: 'center',
    fontStyle: 'italic',
    position: 'absolute',
    bottom: 30,
  },
}); 
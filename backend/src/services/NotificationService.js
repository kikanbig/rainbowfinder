/**
 * üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ë—ç–∫–µ–Ω–¥)
 */
const { Expo } = require('expo-server-sdk');

class NotificationService {
  constructor() {
    this.expo = new Expo();
    this.users = new Map();
  }

  async registerUser(userData) {
    const { pushToken, deviceInfo, preferences } = userData;
    
    if (!Expo.isExpoPushToken(pushToken)) {
      throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π push —Ç–æ–∫–µ–Ω');
    }

    this.users.set(pushToken, {
      pushToken,
      deviceInfo,
      preferences: { minProbability: 80, ...preferences },
      location: null,
      registeredAt: new Date()
    });

    console.log(`üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${pushToken.substring(0, 20)}...`);
    return { success: true };
  }

  async updateUserLocation(pushToken, location) {
    const user = this.users.get(pushToken);
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    user.location = location;
    return { success: true };
  }

  async sendRainbowAlert(location, probability) {
    const messages = [];
    
    for (const [pushToken, user] of this.users) {
      if (probability >= user.preferences.minProbability && user.location) {
        messages.push({
          to: pushToken,
          title: 'üåà –†–∞–¥—É–≥–∞ –≤–æ–∑–º–æ–∂–Ω–∞!',
          body: `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ${probability}% –≤ ${location.name}!`,
          data: { type: 'rainbow_alert', probability }
        });
      }
    }

    if (messages.length > 0) {
      const chunks = this.expo.chunkPushNotifications(messages);
      for (const chunk of chunks) {
        await this.expo.sendPushNotificationsAsync(chunk);
      }
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${messages.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    }

    return { sent: messages.length };
  }
}

module.exports = { NotificationService: new NotificationService() };
